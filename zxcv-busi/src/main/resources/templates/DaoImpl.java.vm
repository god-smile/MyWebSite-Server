package ${package.ServiceImpl};
import com.zxcv.api.commom.constants.DataStatusEnum;
import ${package.Entity}.${entity};
import ${package.Mapper}.${table.mapperName};
import org.springframework.stereotype.Component;
import ${package.Service}.${table.serviceName};
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;

import ${cfg.queryPath};
import ${cfg.operPath};
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * $!{table.comment} 服务实现类
 * Copyright: Copyright (c)
 * @ClassName: ${table.serviceImplName}.java
 * @Description:
 * @version: v1.0.0
 * @author: ${author}
 * @date: ${date}
 * Modification History:
 * Date             Author          Version            Description
 * ---------------------------------------------------------*
 * ${date}         ${author}         v1.0.0               创建
 */
@Component
#if(${kotlin})
open class ${table.serviceImplName} : ${superServiceImplClass}<${table.mapperName}, ${entity}>(), ${table.serviceName} {

}
#else
#set($mapperName ="${table.mapperName.substring(0,1).toLowerCase()}${table.mapperName.substring(1)}")
#set($entityName ="${table.entityName.substring(0,1).toLowerCase()}${table.entityName.substring(1)}")
public class ${table.serviceImplName}  implements ${table.serviceName} {

    private static final Logger logger = LoggerFactory.getLogger(${table.serviceImplName}.class);

    @Autowired
    private ${table.mapperName} ${mapperName};

     /**
      * 新增$!{table.comment}
      * @author: ${author}
      * @since ${date}
      * @param req
      * @return
      */
     @Override
     public Integer save${table.entityName}(SaveAndModify${table.entityName}Req req) {
         ${table.entityName} ${entityName} = new ${table.entityName}();
         BeanUtils.copyProperties(req, ${entityName});
         int insertCount = ${mapperName}.insert(${entityName});
         return insertCount;
     }

     /**
      * 修改$!{table.comment}
      * @author: ${author}
      * @since ${date}
      * @param req
      * @return
      */
     @Override
     public Integer update${table.entityName}ById(SaveAndModify${table.entityName}Req req) {
         ${table.entityName} ${entityName} = new ${table.entityName}();
         BeanUtils.copyProperties(req, ${entityName});
         int updateCount = ${mapperName}.updateById(${entityName});
         return updateCount;
     }

     /**
      * 删除$!{table.comment}
      * @author: ${author}
      * @since ${date}
      * @param req
      * @return
      */
     @Override
     public Integer delete${table.entityName}(SaveAndModify${table.entityName}Req req) {
         ${table.entityName} ${entityName} = new ${table.entityName}();
         BeanUtils.copyProperties(req, ${entityName});
         UpdateWrapper<${table.entityName}> updateWrapper = new UpdateWrapper<>();
         updateWrapper.lambda().in(${table.entityName}::getId, req.getIds());
         updateWrapper.lambda().set(${table.entityName}::getDataState,DataStatusEnum.DATA_STATUS_NO_VALID.getValue())
         .set(${table.entityName}::getModifyEmpId, req.getModifyEmpId())
         .set(${table.entityName}::getModifyEmpName, req.getModifyEmpName())
         .set(${table.entityName}::getModifyTime, req.getModifyTime());
		 int deleteCount = ${mapperName}.update(${entityName}, updateWrapper);
         return deleteCount;
     }

     /**
      * 查询$!{table.comment}对象
      * @author: ${author}
      * @since ${date}
      * @param req
      * @return
      *
      */
     @Override
     public ${table.entityName} select${table.entityName}(Query${table.entityName}Req req) {
         ${table.entityName} ${entityName} = new ${table.entityName}();
         ${table.entityName} ${entityName}Query = new ${table.entityName}();

         BeanUtils.copyProperties(req, ${entityName}Query);
         QueryWrapper<${table.entityName}> querySQL = new QueryWrapper<${table.entityName}>();
         querySQL.setEntity(${entityName}Query);
          ${table.entityName} obj = ${mapperName}.selectOne(querySQL);
         return ${entityName};
     }

     /**
      * 分页-查询$!{table.comment}列表
      *
      * @author: ${author}
      * @since ${date}
      * @param req
      * @return
      */
     @Override
     public IPage<${table.entityName}> query${table.entityName}ForPage(Query${table.entityName}Req req) {
          ${table.entityName} ${entityName}Query = new  ${table.entityName}();
         BeanUtils.copyProperties(req, ${entityName}Query);
         //1.设置分页
         Page<${table.entityName}> page = new Page<>(req.getPageReq().getPageNum(), req.getPageReq().getPageSize());
         //2.查询数据
         QueryWrapper<${table.entityName}> queryWrapper = new QueryWrapper<${table.entityName}>();
         queryWrapper.lambda().eq(true, ${table.entityName}::getDataState,DataStatusEnum.DATA_STATUS_VALID.getValue())
         .eq(req.getId() != null, ${table.entityName}::getId,req.getId())
         queryWrapper.lambda().orderByDesc(${table.entityName}::getId);
         //TODO自定义查询条件
	     IPage<${table.entityName}> pageInfo = ${mapperName}.selectPage(page, queryWrapper);

         return pageInfo;
     }
}
#end
